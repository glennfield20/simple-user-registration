#01 Project Setup_Server index.html with ExpressJs
	- create index.js inside server dir
	- import express & initialize
	- Define catch all routes
	- make app listen to port 3000 and console.log('Running on localhost:3000')
	- install & setup babel-cli and also install express
	- Define new command `server` in package & use `babel-node` to run server/index.js
	- Install babel-preset-es2015 in dev.
	- Create .babelrc file and config babel define presets to es2015.
	- In index.js send html index.html use path.
	- Install to nodemon (This package will restart our server everytime
		we change any file inside server folder)
	- In package instead of babel-node only we use nodeman & watch only the server folder		 & provide file which nodemon will run.
  - Create .gitingore file and ignore node_modules

#02 Project Setup_Render react component
	- In html add div id root or app.
	- Create index.js inside of client folder.
	- import React, render, App in client/index.js
	- render App component in the `root` or `app`.
  - Create App component. Import React & export default function `Hello from React`
	- Install react react-dom
	- Add script tag & point it to `bundle.js` (Webpack will bundle all client stuff
		into one bundle.js file & then it will serve it.)

	SETUP WEBPACK
	- Install webpack & webpack-dev-middleware to the dev.
	- In server/index.js import webpack from webpack & webpackMiddleware from webpack-dev-middleware
	- Import webpackConfig from root '../webpack.config.dev.js'
	- use webpackMiddleware it takes a compiler which is the webpack that compile webpackConfig
	- create webpack.config.dev.js & export default object
	- set entry to /client/index.js using path import it.
  - set output object
			path to __dirname
			filename to bundle.js
			publicPath: '/'
	- set module object loaders array of object.
		- test to all .js of the end of a file. /\.js$/
		- include to only all file inside `client`.
		- loaders an array include babel-loader to transfile es6 code
		
	- set resolve object extensions array include with "*" and .js file
	- Restart server
	- babel doesn't understand react so we need add react in the babelrc preset.
  - install babel-preset-react.
	- Restart server you should see no errors and check in the console StateLess
		component.
  - set devtool to eval-source-map. Use for debugging.
#03 Hot realoading setup

- Install to dev webpack-hot-middleware
- In server/index.js Import webpackHotMiddleware from 'webpack-hot-middleware'
- Use webpackHotMiddleware to compile webpackConfig
- Set value for the second argument of webpackMiddleWare
	- set hot to true
  - public path to webpackConfig output publicPath
  - noInfo to true ( Eliminate noise to webpack )

- Go to wepack config
- Set output object publicPath and path to '/'
- Change entry string to array of string
- And new data to entry 'webpack-hot-middleware/client'
- Import webpack in webpack config.
- Add plugins array adds webpack plugin
	- add new webpack NoErrorsPlugin() ( handles errors messages in more cleaner way )
	- add new optimize.OccurrenceOrderPlugin() (ensures consistent build hashes)
	- add new HotModuleReplacementPlugin()
- Install to dev react-hot-loader
- Teach how react how to reload it self.
- Adds `react-hot-loader` in loaders.
- Run server
- Use class component instead of functional component at the top of hierchy to automatically reload page when theres is changes.
- Change App component to class component.
- It also works in functional component unless outside of a top class component. Create a Greetings component to try it works.

#04 Router & basic navigation
- In index.html linked bootstrap CDN
- In App Create NavigationBar component inside container tag
- In Index.js Import Route, BrowserRouter, Switch from react-router-dom.
- Move App component inside of  BrowserRouter.
- Install react-router-dom.
- In App below NavigationBar render App child component via this.props.children
- In index.js define all the nested/child component App add Switch inside of it define all the child using Route component & set it's path & component to render
- App component our main layout component. It has the layout impormation, navigation, sidebar etc.
- But when we change route we want to render route specific content in some place inside App component.
- This content is store on this.props.children. 
- Import Greetings & SignupPage component
- Go to Greetings add jumbotron. & check server expect it will not work. It's because Greetings becomes the top component for this particular route. As a rule make all Route/Root component as a class component. So change it as a class component.
- Organize component page pages or features.
- Create signup route component. set component value to SignupPage component. Import it from signup/SignupPage/
- Set Red Dice, Sign up as link. Use Link component point to / and /signup. Import Link 
